ggExtra:::ggMarginalGadgetAddin ()
colourpicker:::colourPickerAddin()
# DO NOT ALTER CODE IN THIS CHUNK
library(dplyr)
library(ggplot2)
load(url("https://stat.duke.edu/~mc301/data/mlb11.RData"))
library(dplyr)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(GGally)
load(url("http://www.openintro.org/stat/data/evals.RData"))
qplot(data = evals, x = bty_avg, y = score)
qplot(data = evals, x = bty_avg, y = score, geom = "jitter")
qplot(data = evals, x = bty_avg, y = score, geom = "jitter") +
geom_smooth(method = "lm")
qplot(data = evals, x = bty_avg, y = score, geom = "jitter") +
geom_smooth(method = "lm", se = FALSE)
evals %>%
summarise(cor(bty_avg, bty_f1lower))
qplot(data = evals, x = bty_f1lower, y = bty_avg)
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
qplot(data = evals, x = bty_avg, y = score, color = gender) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE)
qplot(data = evals, x = bty_avg, y = score, color = gender) +
geom_smooth()
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
load(url("https://stat.duke.edu/~mc301/data/mlb11.RData"))
View(mlb11)
mlb11 %>%
summarise(cor(runs, at_bats))
plot_ss(x = at_bats, y = runs, data = mlb11)
plot_ss(x = at_bats, y = runs, data = mlb11, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
m1
summary(m1)
qplot(x = at_bats, y = runs, data = mlb11, geom = "point") +
stat_smooth(method = "lm", se = FALSE)
qplot(x = .fitted, y = .resid, data = m1) +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
qplot(x = .resid, data = m1, geom = "histogram", binwidth = 25) +
xlab("Residuals")
load(url("https://stat.duke.edu/~mc301/data/atheism.RData"))
us12 <- atheism %>%
filter(nationality == "United States", year == "2012")
load(url("https://stat.duke.edu/~mc301/R/fun/inference.RData"))
inference(y = response, data = us12, statistic = "proportion",
type = "ci", method = "theoretical", success = "atheist")
knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(ggplot2)
library(mosaic)
set.seed(9438024)
normTail <- function (m = 0, s = 1, L = NULL, U = NULL, M = NULL, df = 1000,
curveColor = 1, border = 1, col = "#CCCCCC", xlim = NULL,
ylim = NULL, xlab = "", ylab = "", digits = 2, axes = 1,
detail = 999, xLab = c("number", "symbol"), cex.axis = 1,
xAxisIncr = 1, ...)
{
if (is.null(xlim)[1]) {
xlim <- m + c(-1, 1) * 3.5 * s
}
temp <- diff(range(xlim))
x <- seq(xlim[1] - temp/4, xlim[2] + temp/4, length.out = detail)
y <- dt((x - m)/s, df)/s
if (is.null(ylim)[1]) {
ylim <- range(c(0, y))
}
#cat(x)
#cat(y)
plot(x, y, type = "l", xlim = xlim, ylim = ylim, xlab = xlab,
ylab = ylab, axes = FALSE, col = curveColor, ...)
if (!is.null(L[1])) {
these <- (x <= L)
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border = border, col = col)
}
if (!is.null(U[1])) {
these <- (x >= U)
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border = border, col = col)
}
if (all(!is.null(M[1:2]))) {
these <- (x >= M[1] & x <= M[2])
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border = border, col = col)
}
if (axes == 1 || axes > 2) {
if (xLab[1] == "symbol") {
xAt <- m + (-3:3) * s
xLab <- expression(mu - 3 * sigma, mu - 2 * sigma,
mu - sigma, mu, mu + sigma, mu + 2 * sigma, mu +
3 * sigma)
}
else if (xLab[1] != "number") {
stop("Argument \"xLab\" not recognized.\n")
}
else {
temp <- seq(xAxisIncr, max(abs(xlim - m))/s, xAxisIncr) *
s
xAt <- m + c(-temp, 0, temp)
xLab <- round(xAt, digits = digits)
}
}
if (axes > 2) {
axis(1, at = xAt, labels = xLab, cex.axis = cex.axis)
buildAxis(2, c(y, 0), n = 3, nMax = 3, cex.axis = cex.axis)
}
else if (axes > 1) {
buildAxis(2, c(y, 0), n = 3, nMax = 3, cex.axis = cex.axis)
}
else if (axes > 0) {
axis(1, at = xAt, labels = xLab, cex.axis = cex.axis)
}
abline(h = 0)
}
load(url("https://stat.duke.edu/~mc301/data/ames.RData"))
n <- 60
samp <- sample_n(ames, n)
samp
par(mar = c(3,0,0,0))
normTail(M = c(-1.96, 1.96), col = "#569BBD", axes = FALSE)
axis(1, at = c(-3, -1.96, 0, 1.96, 3), labels = c(NA, -1.96, 0, 1.96, NA),
cex.axis = 1.5)
text(x = 0, y = 0.15, "95%", cex = 1.5, col = "white")
text(x = -2.8, y = 0.05, "2.5%", cex = 1.5)
text(x = 2.8, y = 0.05, "2.5%", cex = 1.5)
graphics::arrows(-3.7, 0.25, 1.96, 0.25, col = "red", lwd = 3, code = 3)
text(x = -1.4, y = 0.275, "97.5%", cex = 1.5, col = "red")
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
samp %>%
summarise(
mean =  mean(area),
lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
samp %>%
summarise(
lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
mean =  mean(area),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
mean =  mean(area),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
mean(ames$area)
samp <- sample_n(ames, n)
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
mean =  mean(area),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
<- ames %>%
params
ci <- do(50) * ames %>%
sample_n(n) %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
View(ci)
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
qplot(data = ci_data, x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
436-400-26
463-15-397-26
?save
x <- stats::runif(20)
x
y <- list(a = 1, b = TRUE, c = "oops")
save(x, y, file = "xy.RData")
load("C:/Users/sig35/Google Drive/Work/xy.RData")
data<-load("C:/Users/sig35/Google Drive/Work/xy.RData")
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
save(x, y, file = "xy.RData")
data<-load("C:/Users/sig35/Google Drive/Work/xy.RData")
data
save.image()
unlink("xy.RData")
unlink(".RData")
data<-load("C:/Users/sig35/Google Drive/Work/xy.RData")
load("C:/Users/sig35/Google Drive/Work/xy.RData")
save(x, y, file = "xy.RData")
load("C:/Users/sig35/Google Drive/Work/xy.RData")
xy
load("C:/Users/sig35/Google Drive/Work/xy.RData")
data(xy)
data("xy.RData")
devtools::install_github("tidyverse/dplyr")
install.packages("rlang")
install.packages("bookdown")
library(ggplot2)
library(dplyr)
library(hav)
setwd("C:/Users/sig35/Google Drive/Work/Teaching/Courses/Puzzle Solving w Data/govt_3990/Slides/06_unit6/deck1/data")
#load data
murder <- read.csv("https:.../06_unit6/deck1/data/murder.csv")
# fit model
m_mur_pov <- lm(annual_murders_per_mil ~ perc_pov, data = murder)
# create new data
newdata <- data.frame(perc_pov = 20)
# predict
predict(m_mur_pov, newdata)
ggplot(murder, aes(x= perc_pov, y = annual_murders_per_mil)) +
geom_point(color = "blue", size =4) +
geom_smooth() +
geom_vline(aes(xintercept=20))+
theme_minimal()
?? bookdown
